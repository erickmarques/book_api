plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.0'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'org.sonarqube' version '5.0.0.4638'
	id 'jacoco'
}

group = 'com.erick_marques'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2023.0.2")
}

dependencies {
	/* ====================================== Spring ====================================================== */
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'


		/* ====================================== Security ====================================================== */
	implementation 'com.auth0:java-jwt:4.2.1'
	implementation 'org.springframework.boot:spring-boot-starter-security'

	/* ====================================== Documentation ====================================================== */
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
	implementation 'io.springfox:springfox-swagger2:3.0.0'
	implementation 'io.springfox:springfox-swagger-ui:3.0.0'

	/* ====================================== Data Base ====================================================== */
	runtimeOnly 'com.h2database:h2'
	implementation 'org.flywaydb:flyway-core'

	/* ====================================== Support ====================================================== */
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // Gera o relatório do Jacoco após os testes
}


test {
    jacoco {
        enabled = true
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }
}

tasks.withType(Test).configureEach {
    jacoco {
        excludes += ['com.erick_marques.book_api.config.*',
                     'com.erick_marques.book_api.dto.*',
					 'com.erick_marques.book_api.entity.*',
					 'com.erick_marques.book_api.feign.*',
					 'com.erick_marques.book_api.security.*',
                     'com.erick_marques.book_api.exception.*']
    }
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "book_api"
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.token", "sqp_6904d5be60e8ced3f9375a5424f7738b78db57f7"
		property "sonar.jacoco.reportPaths", "build/jacoco/test.exec"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
}
